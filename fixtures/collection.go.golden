// generated by collections; github.com/jmatosp/collections; DO NOT EDIT

package main

import (
	"fmt"
	"sort"
)

type EligibleMyTypeFilterFunc func(item MyType) bool

func (_c MyTypeList) Filter(eligible EligibleMyTypeFilterFunc) MyTypeList {
	var result MyTypeList
	for _, item := range _c {
		if eligible(item) {
			result = append(result, item)
		}
	}
	return result
}

func (_c MyTypeList) First() MyType {
	if len(_c) == 0 {
		return MyType{}
	}
	return _c[0]
}

type MyTypeLessFunc func(item, other MyType) bool

func (_c MyTypeList) Sort(less MyTypeLessFunc) MyTypeList {
	cCopy := _c
	sort.Slice(cCopy, func(i, j int) bool {
		return less(cCopy[i], cCopy[j])
	})
	return cCopy
}

type MyTypeApplyFunc func(item MyType)

func (_c MyTypeList) Apply(applyFunc MyTypeApplyFunc) {
	for _, item := range _c {
		applyFunc(item)
	}
}

type MyTypeMapFunc func(item MyType) MyType

func (_c MyTypeList) Map(mapFunc MyTypeMapFunc) MyTypeList {
	var result MyTypeList
	_c.Apply(func(item MyType) {
		result = append(result, mapFunc(item))
	})
	return result
}

type MyTypeMapToIntsFunc func(item MyType) int

func (_c MyTypeList) MapToInts(mapFunc MyTypeMapToIntsFunc) []int {
	var result []int
	_c.Apply(func(item MyType) {
		result = append(result, mapFunc(item))
	})
	return result
}

type MyTypeMapToStringsFunc func(item MyType) string

func (_c MyTypeList) MapToStrings(mapFunc MyTypeMapToStringsFunc) []string {
	var result []string
	_c.Apply(func(item MyType) {
		result = append(result, mapFunc(item))
	})
	return result
}

func (_c MyTypeList) Println() {
	fmt.Println(_c)
}

func (_c MyTypeList) Print() {
	_c.Apply(func(item MyType) {
		fmt.Print(item)
	})
}

func (_c MyTypeList) String() string {
	var result string
	_c.Apply(func(item MyType) {
		result = result + fmt.Sprintln(item)
	})
	return result
}
